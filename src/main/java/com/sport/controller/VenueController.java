package com.sport.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.sport.modal.Venue;
import com.sport.repository.VenueRepository;

@Controller    // This means that this class is a Controller
@RequestMapping(path="/venue") // This means URL's start with /demo (after Application path)
public class VenueController {
	@Autowired // This means to get the bean called userRepository
	           // Which is auto-generated by Spring, we will use it to handle the data
	private VenueRepository venueRepository;

	//$ curl 'localhost:8080/demo/add?name=First&email=someemail@someemailprovider.com'
		@GetMapping(path="/add") // Map ONLY GET Requests
		public @ResponseBody Venue addNewVenue (@RequestParam String city
				, @RequestParam String ground) {
			// @ResponseBody means the returned String is the response, not a view name
			// @RequestParam means it is a parameter from the GET or POST request

			Venue n = new Venue();
			n.setCity(city);
			n.setGround(ground);
			venueRepository.save(n);
			return n;
		}
		
		//$ curl 'localhost:8080/demo/add?name=First&email=someemail@someemailprovider.com'
		@GetMapping(path="/edit") 
		public @ResponseBody Venue editVenue (@RequestParam Integer id
				,@RequestParam String city, @RequestParam String ground) {
			// @ResponseBody means the returned String is the response, not a view name
			// @RequestParam means it is a parameter from the GET or POST request

			Venue n = new Venue();
			n.setId(id);
			n.setCity(city);
			n.setGround(ground);
			venueRepository.save(n);
			return n;
		}
		
	@GetMapping(path="/delete") 
	public @ResponseBody Venue deleteVenue (@RequestParam Integer id) {
		Venue n = new Venue();
		n.setId(id);
		venueRepository.delete(n);
		return n;
	}

	@GetMapping(path="/all")
	public @ResponseBody Iterable<Venue> getAllVenue() {
		// This returns a JSON or XML with the users
		return venueRepository.findAll();
	}
}